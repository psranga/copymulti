#!/bin/bash

# cherry-pick todo commits into local main branch.
# bail if current HEAD is main branch.
#  git symbolic-ref HEAD =~ refs/heads/(master|main)
# bail if index and working tree are unclean.
#  git status --porcelain 2>&1 | wc -c | tr -d ' '
# git stash push
# git cherryfetch
# git cherrytodo
# cherrypull.sh
# git stash pop

is_libcherry_available 2>/dev/null && {
  echo "Not setting prompt: libcherry is already loaded in this shell."
} || {
  echo "Setting prompt: seems to be the first time loading libcherry in this shell."
  PS1="ðŸ”¥ $PS1"
}
(( $SHLVL < 2 )) && echo "Warning: top shell. #YOLO"
echo "Updating libcherry commands in this shell."

is_libcherry_available () {
  true
}

# 'wc -l' and removes the leading whitespace.
lines_in_file () {
  ifn="$1"
  wc -l < "$ifn"  | tr -d ' '
}

# paste creates indents with a tab. sed converts the tab to spaces.
cat_indented () {
  paste /dev/null "$1" | sed -E -e 's/^\t/    /g';
}

gitroot () {
  git rev-parse --show-toplevel
}

MYDIR=$(dirname "$0")
echo "MYDIR: $MYDIR"
# Convention: store these scripts in the parent of the repo. Or Maybe within
# 00MONO?
#MYDIR="$(gitroot)/00MONO/copymulti"

current_branch () {
  git branch --show-current
}

is_main_branch () {
  local br="$1"
  [[ "$br" = "main" || "$br" == "master" ]];
}

find_main_branch_of_monorepo () {
  git branch -a | grep -v remote | egrep -o '(main|master)' | head -n 1
}

current_branch_in_gitdir () {
  local gitdir="$1"
  git -C "$gitdir" branch --show-current
}

find_main_branch_in_dir () {
  git -C "$1" branch -a | grep -v remote | egrep -o '(main|master)' | head -n 1
}

# does it in monodir.
find_cherryremote_main_branch_for_url () {
  local url="$1"
  remotename=$(url_to_remotename "$url")
  git branch -r | grep cherryremote_ | egrep -o "$remotename/(main|master)" | head -n 1
}

# this has to be low-level like this. Using 'all_subrepo_urls' is circular.
all_cherryremote_main_branches () {
  # sort and uniq to remove dups due to lines like remote/xx/HEAD -> remote/xx/main
  # followed by a line remote/xx/main by itself.
  git branch -r | grep cherryremote_ | egrep -o "cherryremote_[^/]+/(main|master)" | sort | uniq
}

has_pending_changes () {
  git status | grep -q 'Changes not staged for commit:'
}

exit_if_pending_changes () {
  has_pending_changes && \
    {
      echo
      echo ====================
      cat_indented <(git status)
      echo ====================
      echo
      echo "Changes to tracked files in workdir or index? Commit/stash/reset and retry this command.";
      exit 1;
    } ||
    echo "OK. No pending changes to tracked files."
}

return_if_pending_changes () {
  has_pending_changes && \
    {
      echo
      echo ====================
      cat_indented <(git status)
      echo ====================
      echo
      echo "Changes to tracked files in workdir or index? Commit/stash/reset and retry this command.";
      return 1;
    } ||
    echo "OK. No pending changes to tracked files."
}

stagingdir () {
  echo $(gitroot)/00MONO
}

is_within_monodir () {
  [[ -d "$(stagingdir)" ]]
}

stagingtmpdir () {
  local path="$(stagingdir)/tmp"
  [[ -d "$path" ]] || /bin/mkdir -p "$path"
  echo $path
}

monodir () {
  gitroot
}

all_subrepo_urls() {
  git remote -v | grep cherryremote_ | grep fetch | cut -f 2 | cut -f 1 -d ' ' | sort
}

all_monodir_cherryremotes () {
  git remote | grep cherryremote_ | sort
}

all_subrepo_main_branches () {
  for url in $(all_subrepo_urls); do
    local fn=$(url_to_reponame "$url")
    local gitdir=$(reponame_to_stagingrepodir "$fn")
    find_main_branch_in_dir "$gitdir"
  done
}

all_subrepo_current_branches () {
  for url in $(all_subrepo_urls); do
    local fn=$(url_to_reponame "$url")
    local gitdir=$(reponame_to_stagingrepodir "$fn")
    current_branch_in_gitdir "$gitdir"
  done
}

# ===============================

# the directory under which a url should be checkout.
# ls 00MONO, ls.
url_to_reponame () {
  basename "$1" | sed -e 's/\.git$//g'
}

# the name of the remote for a url (git remote -v).
# e.g., ../somewhere/a -> cherryremote_a
url_to_remotename () {
  echo "cherryremote_$(url_to_reponame "$1")"
}

reponame_to_stagingrepodir () {
  echo "$(stagingdir)"/"$1"
}

main_branch_of_staged_subrepo () {
  local url="$1"
  local fn=$(url_to_reponame "$url")
  find_main_branch_in_dir "$(reponame_to_stagingrepodir "$fn")"
}

remotename_of_subrepo () {
  local url="$1"
  echo "cherryremote_"$(url_to_reponame $url)
}

reset_mono_and_subrepos_to_main_branch () {
  exit_if_pending_changes

  # reset to main branch in monorepo
  git reset --hard $(find_main_branch_of_monorepo)

  # for each staged subrepo, reset to its main branch.
  for url in $(all_subrepo_urls); do
    local fn=$(url_to_reponame "$url")
    local br=$(find_main_branch_in_dir $(reponame_to_stagingrepodir "$fn"))
    reset_subrepo_in_staging_to_branch "$url" "$br"
  done
}

# Feature branches always start from the local HEAD of the subrepo's main branch.
create_fbranch_in_staged_subrepo () {
  local url="$1"
  local br="$2"
  echo "Creating branch $br in staging: $url"

  local fn=$(url_to_reponame "$url")
  git -C "$(reponame_to_stagingrepodir "$fn")" checkout -f -B "$br" $(main_branch_of_staged_subrepo "$url")
  # create the branch on the remote.
  git -C "$(reponame_to_stagingrepodir "$fn")" push -f -u origin "$br"
}

create_fbranch_in_monorepo () {
  local br="$2"

  git checkout -f -B "$br" $(find_main_branch_of_monorepo)
  git push -f -u origin "$br"
}

gitdir_has_remote_by_name () {
  local gitdir="$1"
  local remotename="$2"
  git -C "$gitdir" remote -v | grep fetch | grep -q "$remotename"
}

# cherryremote means in monodir.
gitdir_has_cherryremote_for_url_bad () {
  local gitdir="$1"
  local url="$2"
  local remotename=$(url_to_remotename "$url")
  gitdir_has_remote_by_name "$gitdir" "$remotename"
}

has_branch() {
  local br="$1"
  git branch | grep -q " $br$"
}

gitdir_has_branch() {
  local gitdir="$1"
  local br="$2"
  git -C "$gitdir" branch | grep -q " $br$"
}

new_feature_branch () {
  local br="$1"

  [[ -z "$br" ]] && { echo "Need a branch. We have: $br"; exit 1; }

  exit_if_pending_changes

  # reset to main branch in monorepo
  reset_mono_and_subrepos_to_main_branch

  # create feature branch in monorepo. Always starts out at main branch.
  create_fbranch_in_monorepo "$br"

  # create feature branch in all subrepos.
  for url in $(all_subrepo_urls); do
    create_fbranch_in_staged_subrepo "$url" "$br"
  done
  # for each staged subrepo, reset to its main branch.
  # git checkout -b $fb HEAD
  # for each staged subrepo, git checkout -b $fb HEAD
}

checkout_subrepo_in_staging() {
  local url="$1"
  local br="$2"  # ignored
  echo "Initial checkout of subrepo in staging: $url"

  local fn=$(url_to_reponame "$url")
  local gitdir=$(reponame_to_stagingrepodir "$fn")

  [[ -d "$gitdir" ]] && {
    echo "Repo $url already staged. Resetting to branch $br instead of checkout";
    reset_subrepo_in_staging_to_branch "$url" "$br";
    return
  }

  # TODO: git cherryclonesubrepo "$url"
  git -C "$(stagingdir)" clone --origin "subrepo_actual_origin" "$url" "$fn";

  # TODO: git cherry_link_mono_to_subrepo "$url"
  git -C "$gitdir" remote add cherryremote_monorepo $(monodir)

  [[ -d "$gitdir" ]] || {
    echo "Error staging $url!!" >&2
    return 1;
  }

  echo "Resetting staged $url to branch $br after initial checkout."
  reset_subrepo_in_staging_to_branch "$url" "$br";
}

# check if subrepo has a branch in its remote.
gitdir_subrepo_origin_has_branch() {
  local gitdir="$1"
  local br="$2"
  git -C "$gitdir" branch -r | grep -q " remotes/subrepo_actual_origin/$br$"
}

reset_to_branch_in_staged_subrepo () {
  local url="$1"
  local br="$2"
  echo "Resetting to branch $br of subrepo in staging: $url"

  local fn=$(url_to_reponame "$url")
  local gitdir=$(reponame_to_stagingrepodir "$fn")
  local mainbr=$(find_main_branch_in_dir "$gitdir");
  echo "Inferred main branch: $mainbr";

  [[ -z "$mainbr" ]] && {
    echo "No main branch in subrepo $url!!!" >&2;
    #exit 1;
    return 1;
  }

  [[ -z "$br" ]] && {
    echo "No branch given. Resetting to main branch."
    br="$mainbr"
  }

  gitdir_subrepo_origin_has_branch "$gitdir" "$br" || {
    echo "Starting tracked local branch $br in subrepo $url at origin's HEAD (gitdir: $gitdir)";
    git -C "$gitdir" checkout -f -B "$br" "subrepo_actual_origin/HEAD"
    [[ "$br" != "$mainbr" ]] && {
      echo "Force pushing local feature branch $br in subrepo $url to its origin (gitdir: $gitdir)";
      git -C "$gitdir" push -u -f "subrepo_actual_origin" "$br"
    } || {
      echo "Not force pushing local main branch $br for subrepo $url from staged version."
    }
  }

  echo "Checking out origin branch from subrepo $url as local branch (gitdir: $gitdir)";
  git -C "$gitdir" checkout -f -B "$br" "subrepo_actual_origin/$br"

  git -C "$gitdir" reset --hard "subrepo_actual_origin/$br"
  git -C "$gitdir" fetch cherryremote_monorepo
  #git -C "$(reponame_to_stagingrepodir "$fn")" pull -f origin
}

# checkout out the subrepo if needed.
# If branch is empty reset to main branch.
# create the branch locally if it's not present.
reset_subrepo_in_staging_to_branch () {
  local url="$1"
  local br="$2"
  local fn=$(url_to_reponame "$url")
  [[ ! -d $(reponame_to_stagingrepodir "$fn") ]] && {
    echo "Repo $url not yet staged. Staging and creating local branch $br instead of resetting.";
    checkout_subrepo_in_staging "$url" "$br"
    return
  }

  reset_to_branch_in_staged_subrepo "$url" "$br"
}

# br == "" means use the main branch. TBD if that should be the contract.
reset_all_subrepos_in_staging_to_branch () {
  local br="$1"
  for url in $(all_subrepo_urls); do
    reset_subrepo_in_staging_to_branch "$url" "$br"
  done
}

# must be run within monodir.
fetch_all_monodir_cherryremotes () {
  local monogitdir=$(monodir)
  for url in $(all_subrepo_urls); do
    remotename=$(url_to_remotename "$url")
    git -C "$monogitdir" fetch "$remotename"
  done
}

fetch_all_staged_subrepos () {
  local url=""
  for url in $(all_subrepo_urls); do
    local fn=$(url_to_reponame "$url")
    local gitdir=$(reponame_to_stagingrepodir "$fn")
    git -C "$gitdir" fetch "subrepo_actual_origin"
  done
}

fast_forward_current_branch_in_all_staged_subrepos () {
  local url=""
  for url in $(all_subrepo_urls); do
    local fn=$(url_to_reponame "$url")
    local gitdir=$(reponame_to_stagingrepodir "$fn")
    git -C "$gitdir" pull --quiet --ff-only "subrepo_actual_origin"
  done
}

# ======================================

# br should be a feature branch.
# monocommits that were not not cherry picked into monorepo from subrepos.
# Note: we always start staging by first resetting staged subrepos to origin/br
# and reapplying all new monocommits.
# This is on purpose to keep things simple and reliable.
# aka Staging monocommits is not incremental.
monocommits_to_stage_for_subrepo () {
  local url="$1"
  local br="$2"

  git -C "$(monodir)" rev-list --grep="cherry picked from commit" --invert-grep \
    "$br" "^$(find_cherryremote_main_branch_for_url "$url")" -- $(url_to_reponame "$url") \
    | tac
}

write_monocommits_to_stage_for_subrepo () {
  local url="$1"
  local br="$2"
  local ofile="$3"
  echo "Computing monocommits in (fbranch) $br to be staged for subrepo: $url"

  monocommits_to_stage_for_subrepo "$url" "$br" > $ofile
}

apply_monocommits_to_staged_subrepo () {
  local url="$1"
  local br="$2"
  local ifile="$3"

  local fn=$(url_to_reponame "$url")
  local gitdir=$(reponame_to_stagingrepodir "$fn")
  local monogitdir=$(monodir)

  echo "Applying $(lines_in_file "$ifile") monocommits from branch $br to staged subrepo $url branch $br (gitdir: $gitdir)"
  while read -r commitid; do
    echo;
    echo "Applying commit: $commitid";
    local TMPPATCH=$(mktemp "$(stagingtmpdir)/patch.${br}.${fn}.${commitid}.XXXXXX")
    local TMPLOGMSG=$(mktemp "$(stagingtmpdir)/logmsg.${br}.${fn}.${commitid}.XXXXX")
    # -n +2 removes the first "commit <id>" line.
    git -C "$monogitdir" rev-list --pretty='format:%B' -n 1 "${commitid}" | \
      tail -n +2 > "$TMPLOGMSG"
    echo >> "$TMPLOGMSG"
    echo >> "$TMPLOGMSG" "(from cherrystaged monocommit $commitid for fbranch $br)"

    # Generate the patch.
    git -C "$monogitdir" format-patch --always --no-renames -B --minimal --stdout -p -1 "$commitid" \
      | filterdiff -i "a/$fn/*" -i "b/$fn/*" \
      > "$TMPPATCH"

    echo "Patch is in: $TMPPATCH"
    echo "Log message is in: $TMPLOGMSG"
    echo
    cat_indented "$TMPPATCH"

    # Apply the patch.
    cat "$TMPPATCH" | git -C "$gitdir" apply --index -p2 && {
      # TODO: check that the HEAD in the dir is actually different from before.
      echo "Success! Applied monocommit $commitid fbranch $br onto staged subrepo $url (gitdir: $gitdir)"
    } || {
      echo "Error applying commit: ${commitid} onto staged subrepo $url (gitdir: $gitdir)"
      #echo "Cleaning git am to continue to next commits."
      #git -C "$gitdir" am --abort
      continue
    }

    # Link staged commit with monocommit via suffix in commit message (like git cherry-pick -x).
    git -C "$gitdir" commit -F "$TMPLOGMSG" && {
      echo "Edited commit message to link the staged commit to monocommit $commitid in subrepo $url branch $br (gitdir: $gitdir)"
    } || {
      echo "Error editing commit message for monocommit ${commitid} in staged subrepo $url (gitdir: $gitdir)"
      continue
    }

    #rm "$TMPPATCH" "$TMPLOGMSG"
  done < "$ifile"
}

# =============================================

# apply commits in mono repo to staged subrepos.
# monocommits affecting multiple subrepos are split.
cherry_stage () {
  local dry_run=0
  [[ "$1" = "-n" ]] && dry_run=1
  local MYBRANCH=$(current_branch)

  is_within_monodir || {
    echo "Switch to the monodir (dir 00MONO is absent) and rerun this command.";
    return 1;
  }

  echo "OK. We're running within the monodir.";

  if is_main_branch "$MYBRANCH"; then
    echo "Switch to the feature branch and rerun this command. I got $MYBRANCH.";
    return 1;
  fi

  echo "OK. On a feature branch ($MYBRANCH).";

  has_pending_changes && {
    echo "Unclean working dir or index." >&2
    return 1;
  }

  echo "OK. Resetting to origin's feature branch in subrepos."

  # First hard-reset all subrepos to origin version of feature branch.
  # creating the branch locally and at the origin if needed.
  # Do 'git fetch' on all staged repos.
  reset_all_subrepos_in_staging_to_branch "$MYBRANCH"

  local url fn gitdir remotename
  for url in $(all_subrepo_urls); do
    echo
    echo "Computing monocommits in fbranch $MYBRANCH that should be staged for subrepo $url"

    local fn=$(url_to_reponame "$url")
    local TMPTODOCOMMITS="$(stagingtmpdir)/todocommits.${MYBRANCH}.${fn}"
    echo "Todo commits should be in: $TMPTODOCOMMITS"

    write_monocommits_to_stage_for_subrepo "$url" "$MYBRANCH" "$TMPTODOCOMMITS" || {
      echo "Error computing monocommits in fbranch $MYBRANCH that should be staged for subrepo $url" >&2
      break
    }

    echo "Found $(lines_in_file "$TMPTODOCOMMITS") commits from monofbranch $br for reponame $fn (subrepo: $url)"
    cat_indented "$TMPTODOCOMMITS"

    # By this time, we should have done 'git fetch' on the staged repos.
    [[ "$dry_run" -ne "1" ]] && {
      apply_monocommits_to_staged_subrepo "$url" "$MYBRANCH" "$TMPTODOCOMMITS"
    } || {
      echo "Dry run ($dry_run) in $(pwd):"
      echo apply_monocommits_to_staged_subrepo "$url" "$MYBRANCH" "$TMPTODOCOMMITS"
    }
  done
}

cherry_add () {
  set -e; set -x

  is_within_monodir || {
    echo "Switch to the monodir (dir 00MONO is absent) and rerun this command.";
    return 1;
  }

  echo "OK. We're running within the monodir.";

  MYBRANCH=$(current_branch)
  is_main_branch "$MYBRANCH" || {
    echo "Switch to the main branch and rerun this command. I got $MYBRANCH."
    return 1;
  }

  echo "OK. On the branch ($MYBRANCH).";

  has_pending_changes && {
    echo "Unclean working dir or index." >&2
    return 1;
  }

  echo "OK. Setting up subrepos."

  for url in $*; do
    local fn=$(url_to_reponame "$url")
    local gitdir=$(reponame_to_stagingrepodir "$fn")
    local remotename=$(url_to_remotename "$url")

    gitdir_has_remote_by_name $(monodir) "$remotename" && {
      echo "Removing existing remote named $remotename that's in the way."
      git remote remove "$remotename"
    }

    echo "Adding remote and fetching ($url)"
    git remote add "$remotename" "$url"
    git fetch "$remotename"
    # TODO: cherry-pick the commits from remote into my tree.
  done

  set +e; set +x
}

cherry_rm () {
  is_within_monodir || {
    echo "Switch to the monodir (dir 00MONO is absent) and rerun this command.";
    return 1;
  }

  echo "OK. We're running within the monodir.";

  MYBRANCH=$(current_branch)
  is_main_branch "$MYBRANCH" || {
    echo "Switch to the main branch and rerun this command. I got $MYBRANCH."
    return 1;
  }

  echo "OK. On the branch ($MYBRANCH).";

  has_pending_changes && {
    echo "Unclean working dir or index." >&2
    return 1;
  }

  local url=""
  for url in $*; do
    local fn=$(url_to_reponame "$url")
    local gitdir=$(reponame_to_stagingrepodir "$fn")
    local remotename=$(url_to_remotename "$url")

    gitdir_has_remote_by_name $(monodir) "$remotename" || {
      echo "No remote named $remotename?"
      continue;
    }

    git remote remove "$remotename"
    echo "Removing staged version of subrepo $url"
    echo rm -rf "$gitdir"
  done
}

# cherry-pick todo commits into local main branch.
# bail if current HEAD is not main branch.
#  git symbolic-ref HEAD =~ refs/heads/(master|main)
# bail if index and working tree are unclean.
#  git status --porcelain 2>&1 | wc -c | tr -d ' '
# git stash push
# git cherryfetch
# git cherrytodo
# cherrypull.sh
# git stash pop

git_log_cherryremotes_not_main () {
  local url="$1"
  local mainbr="$(find_main_branch_of_monorepo)"
  [[ -z "$url" ]] &&
    git log --no-merges --format='%H' $(all_cherryremote_main_branches) "^$mainbr" | tac ||
    git log --no-merges --format='%H' $(find_cherryremote_main_branch_for_url "$url") "^$mainbr" | tac

}

git_log_grep_imported_commits () {
  local url="$1"
  local fn=$(url_to_reponame "$url")
  local MSGNEEDLE="cherry picked from commit subrepos/$fn/[0-9a-f]+"
  local mainbr="$(find_main_branch_of_monorepo)"

  # extract the commitid alone from suffixes added by git-cherry-pick -x
  #   (cherry picked from commit subrepos/a/bdc469cded1a72d1359f8edfdf8546b027a5267c)
  git log --no-merges --extended-regexp --grep="$MSGNEEDLE" "$mainbr" | \
    egrep "$MSGNEEDLE" | egrep -o '/[0-9a-f]+' | tr -c -d '[:xdigit:]\n' | tac
}

cherryremote_main_commits_absent_in_main_branch () {
  local url="$1"
  # python program does set difference (first-second) *and also* outputs
  # the elemts in the relative order as in the first file. Too baroque to
  # to this using awk etc (we can't do comm -23, it needs sorted inputs).
  TMPSETA="$(stagingtmpdir)/seta.$fn"
  TMPSETB="$(stagingtmpdir)/setb.$fn"
  TMPSETC="$(stagingtmpdir)/setc.$fn"
  python3 $MYDIR/must-cherry-pick.py \
    <(git_log_cherryremotes_not_main "$url" | tee "$TMPSETA") \
    <(git_log_grep_imported_commits "$url" | tee "$TMPSETB") \
    | tee "$TMPSETC"
}

cherry_sync_unused () {
  set -e; set -x

  is_within_monodir || {
    echo "Switch to the monodir (dir 00MONO is absent) and rerun this command.";
    return 1;
  }

  echo "OK. We're running within the monodir.";

  has_pending_changes && {
    echo "Unclean working dir or index." >&2
    return 1;
  }

  local MYBRANCH=$(current_branch)
  is_main_branch "$MYBRANCH" || {
    echo "Switch to the main branch and rerun this command. I got $MYBRANCH."
    return 1;
  }

  echo "OK. On the branch ($MYBRANCH).";

  # Reset subrepos also to their main branches.
  # empty branch means reset to the main branch.
  echo "OK. Resetting all subrepos to their main branches."
  reset_all_subrepos_in_staging_to_branch ""

  echo "OK. Fetching from cherry remotes."
  fetch_all_monodir_cherryremotes

  echo "OK. Fetching in subrepos."
  fetch_all_staged_subrepos

  echo "OK. Fast-forwarding main branch in subrepos."
  fast_forward_current_branch_in_all_staged_subrepos

  local TMPTOIMPORT=$(mktemp "$(stagingtmpdir)/toimport.XXXXXX")
  echo "Computing unsync'd commits and saving in $TMPTOIMPORT"
  cherryremote_main_commits_absent_in_main_branch > "$TMPTOIMPORT"

  local num_commits=$(lines_in_file "$TMPTOIMPORT")
  echo
  echo "Need to cherry pick $num_commits commits across all cherryremotes."

  [[ "$num_commits" -le 0 ]] && {
    echo "Nothing to cherry pick. Doing nothing."
  } || {
    echo
    cat_indented <(tac "$TMPTOIMPORT")

    echo "Cherry-picking commits to be imported from cherryremotes to monorepo."
    # using --stdin to strictly serialize and have a single error to catch
    # vs using xargs. Helps prevent shenanigans with xargs running multiple
    # processes, nuances in how it returns error status etc.
    #
    # TODO: any advantages to doing git format-patch | git am like with
    # exporting commits. This is significantly easier, probably more reliable too?
    #tac "$TMPTOIMPORT" | \
    #  git cherry-pick -x --allow-empty --allow-empty-message --keep-redundant-commits --stdin
  }

  echo "Done."

  #rm "$TMPTOIMPORT"

  set +e; set +x
}

# all git commands run under monodir.
apply_subrepo_commits_to_monorepo () {
  local url="$1"
  local ifile="$2"
  local fn=$(url_to_reponame "$url")
  local gitdir=$(reponame_to_stagingrepodir "$fn")

  echo "apply_subrepo_commits_to_monorepo: running in $(pwd)"
  echo "Applying $(lines_in_file "$ifile") subrepo commits from $ifile into directory $fn"

  local nsuccess=0 ntot=0
  while read -r commitid; do
    (( ntot = ntot + 1 ))
    echo;
    echo "Applying commit: $commitid";
    local TMPPATCH=$(mktemp "$(stagingtmpdir)/patch.${fn}.${commitid}.XXXXXX")
    local TMPLOGMSG=$(mktemp "$(stagingtmpdir)/logmsg.${fn}.${commitid}.XXXXX")
    # -n +2 removes the first "commit <id>" line.
    git -C "$gitdir" rev-list --pretty='format:%B' -n 1 "${commitid}" | \
      tail -n +2 > "$TMPLOGMSG"
    echo >> "$TMPLOGMSG"
    # (cherry picked from commit bdc469cded1a72d1359f8edfdf8546b027a5267c reponame a)
    echo >> "$TMPLOGMSG" "(cherry picked from commit subrepos/$fn/$commitid)"

    # Generate the patch.
    git -C "$gitdir" format-patch --always --no-renames -B --minimal --stdout -p -1 "$commitid" \
      > "$TMPPATCH"

    echo "Patch is in: $TMPPATCH"
    echo "Log message is in: $TMPLOGMSG"
    echo
    cat_indented "$TMPPATCH"

    # Apply the patch.
    local patch_ok=0
    cat "$TMPPATCH" | git am --reject --directory="$fn" && {
      echo "Success! Imported subrepo commit $commitid into subdir $fn."
      patch_ok=1
    } || {
      echo "Error from git-am for subrepo commit ${commitid} into subdir $fn."
      has_pending_changes && {
        echo "Errors in git-am and there are pending changes. Optimistically assuming commit's other changes are already present."
        echo "i.e., rejecting hypothesis we're so borked that valid patches didn't apply."
        local msgsuffix="(warning: partial import. pending pending changes after importing subrepo commit $commitid repo $fn)"
        echo "$msgsuffix" >> "$TMPLOGMSG"
        patch_ok=2
        #echo "Bailing with unclean index. Use git am --abort and rerun this command."
        #git am --abort
        echo "Committing partial patch. git-ls-files + git-add + git-am continue";
        git ls-files -z -m -d | xargs -0 git add
        git am --continue
        #false; return 1; break
      } || {
        echo "Errors in git-am but no pending changes. Optimistically assuming commit's changes already present."
        echo "i.e., rejecting hypothesis we're so borked that valid patches didn't apply."
        echo "Skipping this commit, and adding an empty commit instead."
        #git am --skip
        local msgsuffix="(warning: nop import. no pending changes after importing subrepo commit $commitid repo $fn)"
        echo "$msgsuffix" >> "$TMPLOGMSG"
        git am --skip
        git commit --allow-empty -C "$commitid"
        patch_ok=3
        #false; return 1; break
      }
    }

    # Link imported commit with monocommit via suffix in commit message (like git cherry-pick -x).
    echo "Amending imported commit's log message."
    git commit --allow-empty --amend -F "$TMPLOGMSG" && {
      echo "Edited commit message to link imported subrepo commit $commitid to its monocommit."
      (( patch_ok != 1 )) && {
        false; echo "Break. Try cherry_sync 1."; return 1;
      } || {
        (( nsuccess = nsuccess + 1 ))
      }
    } || {
      echo "Error editing commit message for monocommit ${commitid} in staged subrepo $url (gitdir: $gitdir)"
      false;
      continue
    }

    #rm "$TMPPATCH" "$TMPLOGMSG"
  done < "$ifile"
  echo "apply_subrepo_commits...: ntot: $ntot nsuccess: $nsuccess reponame: $fn"
}

cherry_sync () {
  set -e; set -x

  local commit_limit="$1" dry_run=0
  [[ -z "$commit_limit" ]] && commit_limit=-1
  [[ "$commit_limit" -eq 0 ]] && dry_run=1

  is_within_monodir || {
    echo "Switch to the monodir (dir 00MONO is absent) and rerun this command.";
    return 1;
  }

  echo "OK. We're running within the monodir.";

  has_pending_changes && {
    echo "Unclean working dir or index." >&2
    return 1;
  }

  local MYBRANCH=$(current_branch)
  is_main_branch "$MYBRANCH" || {
    echo "Switch to the main branch and rerun this command. I got $MYBRANCH."
    return 1;
  }

  echo "OK. On the branch ($MYBRANCH).";

  # Reset subrepos also to their main branches.
  # empty branch means reset to the main branch.
  echo "OK. Resetting all subrepos to their main branches."
  reset_all_subrepos_in_staging_to_branch ""

  echo "OK. Fetching from cherry remotes."
  fetch_all_monodir_cherryremotes

  echo "OK. Fetching in subrepos."
  fetch_all_staged_subrepos

  echo "OK. Fast-forwarding main branch in subrepos."
  fast_forward_current_branch_in_all_staged_subrepos

  local url fn gitdir remotename
  for url in $(all_subrepo_urls); do
    local fn=$(url_to_reponame "$url")
    local TMPTOIMPORT=$(mktemp "$(stagingtmpdir)/toimport.${fn}.XXXXXX")
    local gitdir=$(reponame_to_stagingrepodir "$fn")

    echo
    echo "Computing unsync'd commits for $url and saving in $TMPTOIMPORT"
    cherryremote_main_commits_absent_in_main_branch "$url" > "$TMPTOIMPORT"
    [[ "$commit_limit" -gt 0 ]] && {
      head -n "$commit_limit" "$TMPTOIMPORT" > "$TMPTOIMPORT.head"
      TMPTOIMPORT="$TMPTOIMPORT.head"
    }

    local num_commits=$(lines_in_file "$TMPTOIMPORT")
    echo
    echo "Need to cherry pick $num_commits commits into subdir $fn (for $url)."

    [[ "$num_commits" -le 0 ]] && {
      echo "Nothing to cherry pick. Doing nothing."
    } || {
      echo
      cat_indented "$TMPTOIMPORT"

      echo "Importing commits from $url into subdir $fn of monorepo."
      # using --stdin to strictly serialize and have a single error to catch
      # vs using xargs. Helps prevent shenanigans with xargs running multiple
      # processes, nuances in how it returns error status etc.
      #
      # TODO: any advantages to doing git format-patch | git am like with
      # exporting commits. This is significantly easier, probably more reliable too?
      #tac "$TMPTOIMPORT" | \
      #  git cherry-pick -x --allow-empty --allow-empty-message --keep-redundant-commits --stdin
      [[ "$dry_run" = "0" ]] && apply_subrepo_commits_to_monorepo "$url" "$TMPTOIMPORT"
    }
  done

  echo "Done."

  #rm "$TMPTOIMPORT"

  set +e; set +x
}

