#!/bin/bash

# cherry-pick todo commits into local main branch.
# bail if current HEAD is main branch.
#  git symbolic-ref HEAD =~ refs/heads/(master|main)
# bail if index and working tree are unclean.
#  git status --porcelain 2>&1 | wc -c | tr -d ' '
# git stash push
# git cherryfetch
# git cherrytodo
# cherrypull.sh
# git stash pop

# 'wc -l' and removes the leading whitespace.
lines_in_file () {
  ifn="$1"
  wc -l < "$ifn"  | tr -d ' '
}

# paste creates indents with a tab. sed converts the tab to spaces.
cat_indented () {
  paste /dev/null "$1" | sed -E -e 's/^\t/    /g';
}

gitroot () {
  git rev-parse --show-toplevel
}

#MYDIR=$(dirname "$0")
# Convention: store these scripts in the parent of the repo. Or Maybe within
# 00MONO?
MYDIR=$(dirname $(gitroot))

current_branch () {
  git branch --show-current
}

is_main_branch () {
  br="$1"
  [[ "$br" = "main" || "$br" == "master" ]];
}

find_main_branch_of_monorepo () {
  git branch -a | grep -v remote | egrep -o '(main|master)' | head -n 1
}

find_main_branch_in_dir () {
  git -C "$1" branch -a | grep -v remote | egrep -o '(main|master)' | head -n 1
}

has_pending_changes () {
  git status | grep -q 'Changes not staged for commit:'
}

exit_if_pending_changes () {
  has_pending_changes && \
    {
      echo
      echo ====================
      cat_indented <(git status)
      echo ====================
      echo
      echo "Changes to tracked files in workdir or index? Commit/stash/reset and retry this command.";
      exit 1;
    } ||
    echo "OK. No pending changes to tracked files."
}

listunpicked () {
  MSGNEEDLE="cherry picked from commit"
  python $MYDIR/must-cherry-pick.py \
    <(git log --format='%H' $(git remote | grep cherryremote_) ^$(git branch -a | grep -v remote | egrep -o '(main|master)')) \
    <(git log --grep="$MSGNEEDLE" master | grep "$MSGNEEDLE" | egrep -o '[0-9a-z]+\)$' | tr -d ')')
}

stagingdir () {
  echo $(gitroot)/00MONO
}

stagingtmpdir () {
  path="$(stagingdir)/tmp"
  [[ -d "$path" ]] || mkdir -p "$path"
  echo $path
}

monodir () {
  gitroot
}

all_subrepo_urls() {
  git remote -v | grep cherryremote_ | grep fetch | cut -f 2 | cut -f 1 -d ' ' | sort
}

# ===============================

# the directory under which a url should be checkout.
# ls 00MONO, ls.
url_to_reponame () {
  basename "$1"
}

# the name of the remote for a url (git remote -v).
# e.g., ../somewhere/a -> cherryremote_a
url_to_remotename () {
  echo "cherryremote_"/$(url_to_reponame "$1")
}

reponame_to_stagingrepodir () {
  echo "$(stagingdir)"/"$1"
}

main_branch_of_staged_subrepo () {
  url="$1"
  fn=$(url_to_reponame "$url")
  find_main_branch_in_dir "$(reponame_to_stagingrepodir "$fn")"
}

remotename_of_subrepo () {
  url="$1"
  echo "cherryremote_"$(url_to_reponame $url)
}

reset_mono_and_subrepos_to_main_branch () {
  exit_if_pending_changes

  # reset to main branch in monorepo
  git reset --hard $(find_main_branch_of_monorepo)

  # for each staged subrepo, reset to its main branch.
  for url in $(all_subrepo_urls); do
    fn=$(url_to_reponame "$url")
    br=$(find_main_branch_in_dir $(reponame_to_stagingrepodir "$fn"))
    reset_subrepo_in_staging_to_branch "$url" "$br"
  done
}

# Feature branches always start from the local HEAD of the subrepo's main branch.
create_fbranch_in_staged_subrepo () {
  url="$1"
  br="$2"
  echo "Creating branch $br in staging: $url"

  fn=$(url_to_reponame "$url")
  git -C "$(reponame_to_stagingrepodir "$fn")" checkout -f -B "$br" $(main_branch_of_staged_subrepo "$url")
  # create the branch on the remote.
  git -C "$(reponame_to_stagingrepodir "$fn")" push -f -u origin "$br"
}

create_fbranch_in_monorepo () {
  br="$2"

  git checkout -f -B "$br" $(find_main_branch_of_monorepo)
  git push -f -u origin "$br"
}

has_branch() {
  br="$1"
  git branch | grep -q " $br$"
}

gitdir_has_branch() {
  gitdir="$1"
  br="$2"
  git -C "$gitdir" branch | grep -q " $br$"
}

new_feature_branch () {
  br="$1"

  [[ -z "$br" ]] && { echo "Need a branch. We have: $br"; exit 1; }

  exit_if_pending_changes

  # reset to main branch in monorepo
  reset_mono_and_subrepos_to_main_branch

  # create feature branch in monorepo. Always starts out at main branch.
  create_fbranch_in_monorepo "$br"

  # create feature branch in all subrepos.
  for url in $(all_subrepo_urls); do
    create_fbranch_in_staged_subrepo "$url" "$br"
  done
  # for each staged subrepo, reset to its main branch.
  # git checkout -b $fb HEAD
  # for each staged subrepo, git checkout -b $fb HEAD
}

checkout_subrepo_in_staging() {
  url="$1"
  br="$2"  # ignored
  echo "Initial checkout of subrepo in staging: $url"

  fn=$(url_to_reponame "$url")
  gitdir=$(reponame_to_stagingrepodir "$fn")

  [[ -d "$gitdir" ]] && {
    echo "Repo $url already staged. Resetting to branch $br instead of checkout";
    reset_subrepo_in_staging_to_branch "$url" "$br";
    return
  }

  # TODO: git cherryclonesubrepo "$url"
  git -C "$(stagingdir)" clone --origin "subrepo_actual_origin" "$url" "$fn";

  # TODO: git cherry_link_mono_to_subrepo "$url"
  git -C "$gitdir" remote add cherryremote_monorepo $(monodir)

  [[ -d "$gitdir" ]] || {
    echo "Error staging $url!!" >&2
    exit 1;
    return 1;
  }

  echo "Resetting staged $url to branch $br after initial checkout."
  reset_subrepo_in_staging_to_branch "$url" "$br";
}

reset_to_branch_in_staged_subrepo () {
  url="$1"
  br="$2"
  echo "Resetting to branch $br of subrepo in staging: $url"

  fn=$(url_to_reponame "$url")
  gitdir=$(reponame_to_stagingrepodir "$fn")
  mainbr=$(find_main_branch_in_dir "$gitdir");
  echo "Inferred main branch: $mainbr";

  [[ -z "$mainbr" ]] && {
    echo "No main branch in subrepo $url!!!" >&2;
    exit 1;
    return 1;
  }

  [[ -z "$br" ]] && {
    echo "No branch given. Resetting to main branch."
    br="$mainbr"
  }

  gitdir_has_branch "$gitdir" "$br" || {
    echo "Starting tracked local branch $br in subrepo $url at origin's HEAD (gitdir: $gitdir)";
    git -C "$gitdir" checkout -f -B "$br" "subrepo_actual_origin/HEAD"
    echo "Pushing local branch $br in subrepo $url to origin (gitdir: $gitdir)";
    git -C "$gitdir" push -u -f "$br" "subrepo_actual_origin"
  }

  echo "Checking out origin branch from subrepo $url as local branch (gitdir: $gitdir)";
  git -C "$gitdir" checkout -f -B "$br" "subrepo_actual_origin/$br"

  git -C "$gitdir" reset --hard "subrepo_actual_origin/$br"
  git -C "$gitdir" fetch cherryremote_monorepo
  #git -C "$(reponame_to_stagingrepodir "$fn")" pull -f origin
}

# checkout out the subrepo if needed.
# If branch is empty reset to main branch.
# create the branch locally if it's not present.
reset_subrepo_in_staging_to_branch () {
  url="$1"
  br="$2"
  fn=$(url_to_reponame "$url")
  [[ ! -d $(reponame_to_stagingrepodir "$fn") ]] && {
    echo "Repo $url not yet staged. Staging and creating local branch $br instead of resetting.";
    checkout_subrepo_in_staging "$url" "$br"
    return
  }

  reset_to_branch_in_staged_subrepo "$url" "$br"
}

# br == "" means use the main branch. TBD if that should be the contract.
reset_all_subrepos_in_staging_to_branch () {
  br="$1"
  for url in $(all_subrepo_urls); do
    reset_subrepo_in_staging_to_branch "$url" "$br"
  done
}

# ======================================

# br should be a feature branch.
monocommits_to_stage_for_subrepo () {
  url="$1"
  br="$2"

  git -C "$(monodir)" rev-list --grep="cherry picked from commit" --invert-grep \
    "$br" ^$(remotename_of_subrepo "$url") -- $(url_to_reponame "$url")
}

write_monocommits_to_stage_for_subrepo () {
  url="$1"
  br="$2"
  ofile="$3"
  echo "Computing monocommits in (fbranch) $br to be staged for subrepo: $url"

  monocommits_to_stage_for_subrepo "$url" "$br" > $ofile
}

apply_monocommits_to_staged_subrepo () {
  url="$1"
  br="$2"
  ifile="$3"

  fn=$(url_to_reponame "$url")
  gitdir=$(reponame_to_stagingrepodir "$fn")
  monogitdir=$(monodir)

  echo "Applying $(lines_in_file "$ifile") monocommits from branch $br to staged subrepo $url branch $br (gitdir: $gitdir)"
  while read -r commitid; do
    echo;
    echo "Applying commit: $commitid";
    TMPPATCH="$(stagingtmpdir)/patch.${br}.${fn}.${commitid}"
    TMPLOGMSG="$(stagingtmpdir)/logmsg.${br}.${fn}.${commitid}"
    git -C "$monogitdir" rev-list --pretty='format:%B' "${commitid}^..${commitid}" > "$TMPLOGMSG"
    git -C "$monogitdir" format-patch --always --no-renames -B --minimal --stdout -p -1 "$commitid" \
      > "$TMPPATCH"
    echo "Patch is in: $TMPPATCH; Log message in: $TMPLOGMSG"
    echo
    cat_indented "$TMPPATCH"
  done < "$ifile"
}

# =============================================

main_doit() {
  MYBRANCH=$(current_branch)

  if is_main_branch "$MYBRANCH"; then
    echo "Switch to the feature branch and rerun this command. I got $MYBRANCH.";
    exit 1;
  fi

  echo "OK. On a feature branch ($MYBRANCH).";

  exit_if_pending_changes

  echo "OK. Resetting to origin's feature branch in subrepos."

  # First hard-reset all subrepos to origin version of feature branch.
  # creating the branch if needed.
  reset_all_subrepos_in_staging_to_branch "$MYBRANCH"

  for url in $(all_subrepo_urls); do
    echo
    echo "Computing monocommits in fbranch $MYBRANCH that should be staged for subrepo $url"

    fn=$(url_to_reponame "$url")
    TMPTODOCOMMITS="$(stagingtmpdir)/todocommits.${MYBRANCH}.${fn}"
    echo "Todo commits should be in: $TMPTODOCOMMITS"

    #set -e
    #set -x

    write_monocommits_to_stage_for_subrepo "$url" "$MYBRANCH" "$TMPTODOCOMMITS" || {
      echo "Error computing monocommits in fbranch $MYBRANCH that should be staged for subrepo $url" >&2
      break
    }

    echo "Found $(lines_in_file "$TMPTODOCOMMITS") commits from monofbranch $br for reponame $fn (subrepo: $url)"
    cat_indented "$TMPTODOCOMMITS"

    # By this time, we should have done 'git fetch' on the staged repos.
    apply_monocommits_to_staged_subrepo "$url" "$MYBRANCH" "$TMPTODOCOMMITS"

    #set +e
    #set +x
  done

  true;
  return

  echo
  echo "OK. Computing unsync'd commits:"
  listunpicked | tac
  echo

  echo "OK. Cherry-picking unsync'd commits:"
  listunpicked | tac | \
    git cherry-pick -x --allow-empty --allow-empty-message --keep-redundant-commits --stdin

  set +e
}
